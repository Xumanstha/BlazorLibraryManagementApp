@page "/book"
@rendermode InteractiveServer
<style>
    .main{
        width:100%;
        height:80vh;
        border: 1px solid black;
        display:grid;
        grid-template-columns: auto auto;
    }
    .borrow{
        width:90%;
        height:80%;
        margin:auto;
        border:1px solid black;
    }
    .addbook{
          width:90%;
        height:80%;
        margin:auto;
        border:1px solid black;
    }
    .borrow button{
        display:block;
        margin:auto;
    }
   .borrow .inputs
    {display: flex;
    @* justify-content: space-around; *@
    @* border:1px solid black; *@
    width:80%;
    margin: 15px auto;
    }
    .inputs label
    {
        width:30%;
    }
    .addbook .inputs
    {
    display: flex;
    width:80%;
    margin: 15px auto;
    }
    .addbook .inputs label{
        width:45%;
    }
    .addbook button{
           display:block;
        margin:auto;
    }
    .List
    {
        height:auto;
        width:90%;
        border:1px solid black;
        margin:20px auto;
    }
     table {
        width: 90%;
        margin: auto;
    }

    tr {
        height: 5vh;
    }

    table,
    th,
    td {
        border: 1px solid black;
        border-collapse: collapse;
        text-align: center;
    }
</style>
<div class="main">
<div class="borrow">
<h2 style="text-align:center">Search And Borrow Book</h2>
<div class="inputs"><label>Title of Book:</label>
<input type="text"  @bind="title"></div>
@if(title==""||bookone==null)
{
<button @onclick="()=> searchTitle(title)">Search Book</button>
}
@if(bookone==null&&title!="")
{
    <p>There inputs No book</p>
}
@if(bookone!=null)
{
    <div class="inputs"><label>Name of Student:</label>
<input type="text"></div>
<div class="inputs"><label>ID of Student:</label>
<input type="text" @bind="StudentId"></div>
<div class="inputs"><label>Id of Book:</label>
<input type="text" @bind="bookId"></div>
<button @onclick="()=>Borrow()">Borrow Book</button>
    <p>Title:@bookone.Title</p>
    <p>Author:@bookone.Author</p>
    <p>Book Count:@bookone.BookCount</p>
    <h3>Enter Name And Id to borrow the book</h3>
    <p style="display:@MessageVisible()?'block':'hide'">@message</p>
}
</div>
</div>
@* <div class="addbook">
<h2 style="text-align:center">Borrow Book</h2>
<div class="inputs"><label>Title of Book:</label>
<input type="text"></div>
<button>Click to Add</button>
</div> *@
@* <div class="addbook">
<h2 style="text-align:center">Add New Book</h2>
<div class="inputs"><label>Title of Book:</label>
<input type="text"></div>
<div class="inputs"><label>Name of Author:</label>
<input type="text"></div>
<div class="inputs">
    <label>Code of book:</label>
    <input type="text">
</div>
<div class="inputs">
    <label>No.of Book:</label>
    <input type="number">
</div>
<div class="inputs">
    <label>Date of Book Published:</label>
    <input type="date">
</div>
<button>Click to Add</button>
</div> *@
<div class="List">
    <h2 style="text-align:center;">List of Book</h2>
<table>
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Code</th>
                <th>Published Date</th>
                <th>Book Count</th>
                  <th>Available</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var b in BookList.books)
            {
<tr>
    <td>@b.Title</td>
    <td>@b.Author</td>
    <td>@b.Id</td>
    <td>@b.PublishDate</td>
    <td>@b.BookCount</td>
    <td>@if(b.BookCount!=0)
        {
            <span>Yes</span>
        }else{
            <span>No</span>
        }
    </td>
</tr>
}
        </tbody>
</table>
</div>
@code
{
   private string StudentId="";
    private string bookId="";
   private string title="";
    private StudentStructure? std;
    private BookStructure? bookone;
    private string message="";

private void searchTitle(String t)
{
bookone=BookList.books.Find(x=>x.Title==t);
}
private int Search()
{
 std=StudentList.students.Find(x=>x.Id==StudentId);
 if(bookone != null && bookone.Bookid.Contains(bookId)&&std!=null)
 {
  return 1;
 }
 else{
    return 0;
 }
}
private void Borrow()
{
   if(Search()==1)
   {
    if(std!=null)
    std.AddBooks(title);
    if(bookone!=null)
    {
        bookone.RemoveBookid(bookId);
    }
    Clear();
   } else{
message="No data";
MessageVisible();
   }
}
private void Clear()
{
    title="";
    bookone=null;
    std=null;
    bookId="";
    StudentId="";
}
private int MessageVisible()
{if(message!="")
{
    return 1;
}else{
    return 0;
    }
}
}