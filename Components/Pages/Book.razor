@page "/book"
@rendermode InteractiveServer
<style>
    
    .main{
        width:100%;
        height:80vh;
        border: 1px solid black;
        display:grid;
        grid-template-columns: auto auto;
    }
    .borrow{
        width:50%;
        height:70%;
        margin:auto;
        border:1px solid black;
        visibility: @message1;
        z-index: 2;
        position:fixed;
        top:20%;
        left:30%;
    }
    .addbook{
          width:60%;
        height:70%;
        margin:auto;
        border:1px solid black;
          position:fixed;
        top:10%;
        left:25%;
         z-index: 5;
         visibility: @message5;
    }
    .newBook{
           width:80%;
        height:90%;
        margin:auto;
         display:@block;
    }
    .borrow button{
        display:block;
        margin:auto;
    }
   .borrow .inputs
    {display: flex;
    @* justify-content: space-around; *@
    @* border:1px solid black; *@
    width:80%;
    margin: 15px auto;
    }
    .inputs label
    {
        width:30%;
    }
 
    .returnbook .inputs
    {
    display: flex;
    width:80%;
    margin: 15px auto;
    }
    .returnbook .inputs label{
        width:45%;
    using System.Diagnostics.Tracing;
    using System.Diagnostics.Tracing;
    }
    .returnbook button{
           display:block;
        margin:auto;
    }
    .List
    {
        height:auto;
        width:80%;
        border:1px solid black;
        margin:20px auto;
        visibility: @message4;
        position:fixed;
        top:20%;
        z-index:5;
    }
     table {
        width: 90%;
        margin: auto;
    }

    tr {
        height: 5vh;
    }

    table,
    th,
    td {
        border: 1px solid black;
        border-collapse: collapse;
        text-align: center;
    }
    .bookid{display: flex;
    flex-wrap: nowrap;
    justify-content: space-around;}
    .returnbook{
          width:50%;
        height:70%;
        margin:auto;
        border:1px solid black;
        @* position:relative; *@
           visibility: @message3;
        z-index: 4;
           position:fixed;
        top:20%;
        left:33%;
    }
    .retbtn{
        position:absolute;
        top:90%;
        right:50%;
    }
    .menu{
        width:50%;
        margin:auto;
        height:70vh;
        border:2px solid black;
        visibility:@message2;
    }
    .menu .buttons
    {
        width:90%;
        height:10%;
        border:1px solid black;
        margin:5% auto;
        display: block;
        z-index:1;
    }
    .borrow .btns{
        position:relative;
        @* width:10px;
        height:10px; *@
        left:48%;
    }
     .returnbook .btns{
        position:relative;
        @* width:10px;
        height:10px; *@
        left:48%;
    }
    .List .btns{
                position:relative;
        @* width:10px;
        height:10px; *@
        left:48%;

    }
     .addbook .inputs
    {
    display: flex;
    width:80%;
    margin: 15px auto;
    }
    .addbook button{display: block;
    margin:auto;}
    .EnterCode{
        width:50%;
        height:50%;
        border:1px solid black;
        margin:auto;
        display:@enterCode;
    }
    .EnterCode button{display: block;
    margin:auto;}
</style>
<div class="menu">
<h1 style="text-align:center">Welcome to Nepathya Library </h1>
<button class="buttons" @onclick='()=>Call("Borrow")'>Search And Borrow Book</button>
<button class="buttons" @onclick='()=>Call("Return")'>Return Book</button>
<button class="buttons" @onclick='()=>Call("ListBook")'>List Of Book</button>
<button class="buttons" @onclick='()=>Call("AddNewBook")'>Add New Book</button>
</div>

<div class="borrow">
    <button class="btns fa-solid fa-arrow-left" @onclick='()=>Call("Borrow")'></button>
<h2 style="text-align:center">Search And Borrow Book</h2>
<div class="inputs"><label>Title of Book:</label>
<input type="text"  @bind="title"></div>
@if(title==""||bookone==null)
{
<button @onclick="()=> searchTitle(title)">Search Book</button>
}
@if(bookone==null&&title!="")
{
    <p>There is No book of This Title</p>
}
@if(bookone!=null)
{
    <div class="inputs"><label>Name of Student:</label>
<input type="text"></div>
<div class="inputs"><label>ID of Student:</label>
<input type="text" @bind="StudentId"></div>
<div class="inputs"><label>Id of Book:</label>
<input type="text" @bind="bookId"></div>
<button @onclick="()=>Borrow()">Borrow Book</button>
    <p>Title:@bookone.Title</p>
    <p>Author:@bookone.Author</p>
    <p>Book Count:@bookone.BookCount</p>
    <ul class="bookid">
        @foreach(var m in bookone.Bookid){
            <li>@m</li>
        }
    </ul>
    <h3>Enter Name And Id to borrow the book</h3>
    <p style="display:@MessageVisible()?'block':'hide'">@message</p>
}
</div>
<div class="returnbook">
       <button class="btns fa-solid fa-arrow-left" @onclick='()=>Call("Return")'></button>
<h2 style="text-align:center">Return Book</h2>
<div class="inputs"><label>Name:</label>
<input type="text"></div>
<div class="inputs"><label>ID of Student:</label>
<input type="text" @bind="StudentId2"></div>
@if(std1==null){
        <button @onclick="()=>StudentDetails(StudentId2)">Enter for Details</button>
        }else{
            <button class="retbtn" @onclick="()=>Return()">Return</button>
             <p style="display:@MessageVisible()?'block':'hide'">@message</p>
        }
        @if(std1!=null)
        {
             @if(std1.NumberOfBooks!=0)
                   {
                    <div class="inputs"><label>Title Of Book:</label>
<input type="text" @bind="Title1"></div>
                    <div class="inputs"><label>Id Of Book:</label>
<input type="text" @bind="bookId2"></div>
                    <p><label>Borrowed Books:</label>
                    @if (std1.BorrowedBooks != null && std1.BorrowedBooks.Any())
                    {
                        <ul>
                            @foreach (var book in std1.BorrowedBooks)
                            {
                                <li>@book</li>
                            }
                        </ul>
                    }
                    </p>
                   }

        }
</div>

<div class="addbook">
    <button class="btns fa-solid fa-arrow-left" @onclick='()=>Call("AddNewBook")'></button>
    <div class="newBook">
<h2 style="text-align:center">Add New Book</h2>
<div class="inputs"><label>Title of Book:</label>
<input type="text" @bind="Title2"></div>
<div class="inputs"><label>Name of Author:</label>
<input type="text" @bind="auth"></div>
<div class="inputs">
    <label>Code of book:</label>
    <input type="text" @bind="code">
</div>
<div class="inputs">
    <label>No.of Book:</label>
    <input type="number" @bind="num">
</div>
<div class="inputs">
    <label>Date of Book Published:</label>
    <input type="date" @bind="Date">
</div>
<button @onclick='()=>AddNewBook(Title2,auth,code,num,Date?.ToString("yyyy-MM-dd") ?? "0000-00-00")'>Click to Add</button>
    </div>
<div class="EnterCode">
    <h2 style="text-align:center;">Enter the Code for Book</h2>
    <div class="inputs">
    <label>Code of book @temp:</label>
    <input type="text" @bind="code">
    <button @onclick="()=>AddCode()">Click to Add</button>
</div>
</div>
<p>@addbook</p>
</div>
<div class="List">
     <button class="btns fa-solid fa-arrow-left" @onclick='()=>Call("ListBook")'></button>
    <h2 style="text-align:center;">List of Book</h2>
<table>
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Code</th>
                <th>Published Date</th>
                <th>Book Count</th>
                  <th>Available</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var b in BookList.books)
            {
<tr>
    <td>@b.Title</td>
    <td>@b.Author</td>
    <td>@b.Id</td>
    <td>@b.PublishDate</td>
    <td>@b.BookCount</td>
    <td>@if(b.BookCount!=0)
        {
            <span>Yes</span>
        }else{
            <span>No</span>
        }
    </td>
</tr>
}
        </tbody>
</table>
</div>
@code
{
    private int count=1;
private int temp=1;
 private string message3="hidden";
  private string message4="hidden";
   private string message5="hidden";
    private string message1="hidden";
        private string message2="visible";
    private string Title1="";
   private string StudentId="";
   private string StudentId2="";
    private string bookId="";
    private string bookId2="";
   private string title="";
   private string auth="";
   private string Title2="";
   private int num=0;
   private string code="";
private DateTime? Date=null;
    private StudentStructure? std,std1;
    private BookStructure? bookone;
    private BookStructure? booktwo;
    private string message="";
    private string enterCode="none";
    private string addbook="";
    private string block="block";
private void searchTitle(String t)
{
bookone=BookList.books.Find(x=>x.Title==t);
}
private int Search()
{
 std=StudentList.students.Find(x=>x.Id==StudentId);
 if(bookone != null && bookone.Bookid.Contains(bookId)&&std!=null)
 {
  return 1;
 }
 else{
    return 0;
 }
}
private void Borrow()
{
   if(Search()==1)
   {
    if(std!=null)
    std.AddBooks(title,bookId);
    if(bookone!=null)
    {
        bookone.RemoveBookid(bookId);
    }
    Clear();
   } else{
message="Invalid Bookid and Studentid! Please try again";
MessageVisible();
   }
}
private void Clear()
{
    title="";
    bookone=null;
    std=null;
    bookId="";
    StudentId="";
    std1=null;
    Title1="";
    bookId2="";
    StudentId2="";
    message="";
    Title2="";
    auth="";
    code="";
    Date=null;
    num=0;
    temp=1;
    addbook="";
}
private int MessageVisible()
{if(message!="")
{
    return 1;
}else{
    return 0;
    }
}
private void StudentDetails(string s)
{
    if(StudentId2!="")
     std1=StudentList.students.Find(x=>x.Id==StudentId2);
}
private int Check()
{
    booktwo=BookList.books.Find(x=>x.Title==Title1);
    if(std1!=null&&booktwo!=null){
if(std1.BooksId.Contains(bookId2)&&BookList.BookIDs.Contains(bookId2)&&(!booktwo.Bookid.Contains(bookId2)))
{
return 1;
}
else{
    return 0;
}
}
return 0;
}
private void Return()
{
    if(Check()==1&&booktwo!=null&&std1!=null)
    {
      booktwo.AddBookid(bookId2);
      std1.RemoveBook(Title1,bookId2);
      Clear();
    }
    else{
        message="Invalid BookId or Student Title";
        MessageVisible();
    }
}
private void Call(string s)
{
    
    if(s=="Borrow")
    {
     count++;
     if(count%2==0)
     {
        message1="visible";
        message2="hidden";
     }
     else{
        message1="hidden";
          message2="visible";
     }
    }
    
    else if(s=="Return")
    {
        count++;
        if(count%2==0)
        {
        message3="visible";
         message2="hidden";
        }
        else{
            message3="hidden";
             message2="visible";
        }
    }
    else if(s=="ListBook")
    {
        count++;
        if(count%2==0)
        {
            message4="visible";
            message2="hidden";
        }
        else{
            message4="hidden";
            message2="visible";
        }
    }
    else if(s=="AddNewBook")
    {
          count++;
        if(count%2==0)
        {
            message5="visible";
            message2="hidden";
        }
        else{
            message5="hidden";
            message2="visible";
        }
    }
    }
    private void AddNewBook(string t,string a,string c,int n,string D)
    {
        searchTitle(t);
        if(bookone==null&&t!=""&&a!=""&&c!=""&&n!=0&&D!=null){
     BookList.books.Add(new BookStructure(t,a,c,0,D));
     enterCode="block";
     block="none";
     searchTitle(t);
     }
     else if(bookone!=null)
     {
addbook="This book already exist";
     }
    }
    private void AddCode()
    {
        if(!BookList.BookIDs.Contains(code)&&temp<=num)
        {
        BookList.BookIDs.Add(code);
        if(bookone!=null){
        bookone.AddBookid(code);
        temp++;
        }
        }
         if(temp>num){
        Clear();
        enterCode="none";
        block="block";
        }
    }
}